#include <LowPower.h>
#include <IRremote.h>
#include <math.h>
#define sensor A0
#define storage A1
//int sensor = A0;
float VOLTS;
//float TMP;
float TEMP;
float voltage;
const int PV12PIN = 4;  // Example pin for PV12PIN
const int PV34PIN = 5;  // Example pin for PV34PIN
const int PV5PIN = 7;   // Example pin for PV5PIN

float maxAdcReading = 780.0;   // Maximum observed ADC value
float referenceVoltage = 3.3;  // Reference voltage (3.3V for Arduino Pro Mini)
float dividerRatio = 680.0 / (100.0 + 680.0);  // Calculate the potential divider ratio


const int interruptPin = 2;
const int Receiver = 9;
const int Txmitter1 = 6;
const int Txmitter2 = 19;
const int Txmitter3 = 11;
const int Txmitter4 = 19;

int VAL = 0;
int ADD = 0;
bool volt_m = false;
bool temp_m = false;

void setup() {
  pinMode(interruptPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(interruptPin), wakeUp, FALLING);
  pinMode(Txmitter1, OUTPUT);
  pinMode(Txmitter2, OUTPUT);
   pinMode(Receiver, OUTPUT);
  pinMode(PV12PIN, OUTPUT);
  pinMode(PV34PIN, OUTPUT);
  pinMode(PV5PIN, OUTPUT);
  digitalWrite(PV12PIN, LOW);
  digitalWrite(PV34PIN, LOW);
  digitalWrite(PV5PIN, LOW);
  digitalWrite(Receiver, HIGH);
  pinMode(3, OUTPUT);
  pinMode(7, OUTPUT); //Cap sense on
  pinMode(10, OUTPUT);
  pinMode(8, OUTPUT);
  Serial.begin(9600);
}

void loop() {
  if (volt_m == 1) {
    Sense_storage();
  }
  else {}
  delay(10);
  if (temp_m == 1) {
    Sense();
  }
  else {}
  delay(10);
  LowPower.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF);
}

void wakeUp() {

  detachInterrupt(digitalPinToInterrupt(interruptPin));
  delay(100);// do not change value : stability PROMINI 3.3
  digitalWrite(interruptPin, LOW);
  delay(200);// do not change value : stability PROMINI 3.3
  int RECV_PIN = 2;
  delay(400);// do not change value : stability PROMINI 3.3
  IRrecv irrecv(RECV_PIN);
  delay(400);// do not change value : stability PROMINI 3.3
  decode_results results;
  delay(300);// do not change value : stability PROMINI 3.3
  irrecv.enableIRIn(); // Start the receiver
  delay(200);// do not change value : stability PROMINI 3.3
  VAL = 0;
  delay(5);

  {
    if (irrecv.decode(&results))
    { digitalWrite(Receiver, LOW);
      //       Serial.print("value is  ");
      //      delay(10);
      //      Serial.println(results.value, HEX);
      //      delay(10);
      //       Serial.print("address is  ");
      delay(5);
      //       Serial.println(results.address, HEX);
      irrecv.resume(); // Receive the next value
      delay(200);// do not change value : stability PROMINI 3.3
    }
    VAL = results.value;
    //            Serial.println(VAL);
    //          delay(10);

    ADD  = results.address;
    //            Serial.println(ADD);
    //          delay(10);
    //  digitalWrite(Receiver, LOW);
    delay(5);
    if (ADD == -21566) {

      if (VAL == -17487) {
        Serial.println ("Command 1");
        delay(10);
        LowPower.powerDown(SLEEP_2S, ADC_OFF, BOD_OFF); VAL = 0; results.value = 0; results.address = 0;
      }
      delay(2);
      if (VAL == -17486) {
        Serial.println ("Command 2");
        delay(10); // Cap_voltage_measure
     //   volt_m = true;
        delay(10);
        LowPower.powerDown(SLEEP_1S, ADC_OFF, BOD_OFF); VAL = 0; results.value = 0; results.address = 0;
      }
      delay(2);
      if (VAL == -17485) {
        Serial.println ("Command 3");
        delay(10); //Temperature measure & Transmission
        digitalWrite(Receiver, LOW);
        temp_m = true;
        delay(10);
        delay(10);
        LowPower.powerDown(SLEEP_1S, ADC_OFF, BOD_OFF); VAL = 0; results.value = 0; results.address = 0;
      }
      delay(2);
      if (VAL == -17483) {
        Serial.println ("Command 4");
        delay(10);
        digitalWrite(Receiver, LOW);
      
        LowPower.powerDown(SLEEP_2S, ADC_OFF, BOD_OFF); VAL = 0; results.value = 0;
        deep_sleep();
      }
      delay(2);
      if (VAL == -17481) {
        Serial.println ("Command 5");
        delay(10);
        digitalWrite(Receiver, LOW);

        LowPower.powerDown(SLEEP_1S, ADC_OFF, BOD_OFF); VAL = 0; results.value = 0; results.address = 0;
        EN_TX();

      }

      else {}

      results.value = 0;
      results.address = 0;
      delay(2);
      irrecv.resume();//clear Cache
    }

    else {}

    results.value = 0;
    delay(2);
    irrecv.resume();//clear Cache
  }

  delay(2);
  digitalWrite(Receiver, HIGH);
  delay(10);

  delay(2);
  int interruptPin = 2;
  delay(2);
  pinMode(interruptPin, INPUT_PULLUP);
  delay(2);
  attachInterrupt(digitalPinToInterrupt(interruptPin), wakeUp, FALLING);
  delay(2);
}

float Sense_storage() {
  digitalWrite(7, HIGH);   // Cap sense on (HIGH is the voltage level)
  delay(2);
  int sensorValue = analogRead(storage);
  // Convert the analog reading (which goes from 0 - 1023) to a voltage (0 - 5V):
  float voltage = sensorValue * 2 * (3.3 / 1023.0);
  // print out the value you read:
  //  Serial.print("Cap Voltage ");
  //  delay(2);
  //  Serial.println(voltage);
  delay(2);
  digitalWrite(7, LOW);
  delay(2);
  volt_m = false;
  delay(2);

  return voltage; // Return the voltage value
}


void Sense() {
  delay(50);
  detachInterrupt(digitalPinToInterrupt(interruptPin));
  delay(100);// do not change value : stability PROMINI 3.3
  digitalWrite(interruptPin, LOW);
  delay(200);// do not change value : stability PROMINI 3.3
  delay(10);

     float stor = 4.00;
        delay(2);
        if (stor < 3.42 ) {

          while (stor < 3.95 ){
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 stor = Sense_storage(); // Update the storage value after delay
               }     
        }
else {
  delay(5);
//  IRsend irsend;
//  delay(200);
//  int reading = analogRead(sensor);
//  VOLTS = reading * (3100 / 1024.0);
//  TEMP = ((VOLTS - 500) / 10);
//  Serial.print("Temperature (C): ");
//  delay(5);
//  Serial.println(TEMP);
//  int PV = 2;  // Example temperature value
//  int cap = 10 * (Sense_storage()); // Example capacity value
//  int nodeID = 2;          // Example node ID value
//  int Temp = TEMP;             // Example PV value



digitalWrite(Receiver, LOW);

delay(10);

  int PV1 = readAndConvert(A2, PV12PIN, 1);
  int PV2 = readAndConvert(A4, PV12PIN, 2);
  int PV3 = readAndConvert(storage, PV34PIN, 3);
  int PV4 = readAndConvert(sensor, PV34PIN, 4);
  int PV5 = readAndConvert(A7, PV5PIN, 5);

  PV1 -= 10;
  PV2 -= 10;
  PV3 -= 10;
  PV4 -= 10;
  PV5 -= 10;

// Concatenate the values into a 28-bit hexadecimal value
// Concatenate the values into a 25-bit value and then shift left by 3 to make it 28 bits
// Concatenate the values into a 25-bit value and then shift left by 3 to make it 28 bits
  unsigned long payload = (((unsigned long)(PV1 & 0x1F) << 20) |
                          ((unsigned long)(PV2 & 0x1F) << 15) |
                          ((unsigned long)(PV3 & 0x1F) << 10) |
                          ((unsigned long)(PV4 & 0x1F) << 5)  |
                          ((unsigned long)(PV5 & 0x1F))) << 3;

  Serial.print("Packed Payload: ");
  Serial.println(payload, HEX);  // Print the packed payload in hex format

  delay(2);
  digitalWrite(Txmitter1, HIGH);  // Ensure 'Txmitter' pin is correctly defined and set up
  delay(10);

  // Transmitting the packed data using RC5 protocol
//  for (int i = 0; i < 1; i++) {
//    irsend.sendRC5(payload, 28);  // Sending 28 bits with RC5
//    delay(40);  // Adjust delay as needed
//  }

  delay(5);

   Serial.println ("TX complete");
        delay(10);
  delay(5);
  temp_m = false;
  delay(2);
  digitalWrite(Receiver, LOW);
  delay(10);

}
  wakeUp();
}

void EN_TX() {
  float stor = Sense_storage();
  delay(2);

  if (stor >= 4.43) {
    while (stor > 3.45) {
      digitalWrite(10, HIGH);
      digitalWrite(3, HIGH);
      delay(2);
      for (int i = 0; i < 1; i++) {
        LowPower.powerDown(SLEEP_4S, ADC_OFF, BOD_OFF);
      }
      delay(2);
      digitalWrite(3, LOW);
      digitalWrite(10, LOW);
      delay(3);
      stor = Sense_storage(); // Update the storage value after delay
    }
  } else {
    while (stor < 4.46) {
      LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
      LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
      LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
      stor = Sense_storage(); // Update the storage value after delay
    }
  }
  delay(2);
  LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
  LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
  LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
  delay(2);
  wakeUp();
}

void deep_sleep(){
  
   float stor = Sense_storage();
        delay(2);
        if (stor < 3.56 ) {

          while (stor < 4.3 ){
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);
                 stor = Sense_storage(); // Update the storage value after delay
               }     
        }

        else {   LowPower.powerDown(SLEEP_2S, ADC_OFF, BOD_OFF);} 

        wakeUp();
}

int readAndConvert(int analogPin, int digitalPin, int pvNumber) {
  delay(5);
  digitalWrite(digitalPin, HIGH);
  delay(200);
  int reading = analogRead(analogPin);
  delay(50);
  digitalWrite(digitalPin, LOW);
  delay(50);
  float normalizedReading = (reading / maxAdcReading) * 1024.0;
  float VOLTS = normalizedReading * (referenceVoltage / 1024.0);
  float actualVolts = (VOLTS / dividerRatio)*100;
  int scaledVolts = (actualVolts );

  // Print the values for debugging
  Serial.print("ADC Reading from pin ");
  Serial.print(analogPin);
  Serial.print(": ");
  Serial.println(reading);
  Serial.print("Normalized Reading: ");
  Serial.println(normalizedReading);
  Serial.print("Voltage at pin ");
  Serial.print(analogPin);
  Serial.print(": ");
  Serial.println(VOLTS);
  Serial.print("Actual Input Voltage: ");
  Serial.println(actualVolts);
  Serial.print("Scaled Voltage (rounded): ");
  Serial.println(scaledVolts);
  delay(10);

  // Combine the PV number and the scaled voltage into a single payload
  unsigned long payload = ((pvNumber & 0xF) << 12) | (scaledVolts & 0xFFF);  // PV number (4 bits), Scaled voltage (12 bits)
  delay(2);
  digitalWrite(Txmitter1, HIGH);
  digitalWrite(Txmitter2, HIGH);
  digitalWrite(Txmitter3, HIGH);
  digitalWrite(Txmitter4, HIGH);
  delay(10);
  delay(5);
  IRsend irsend;
  delay(200);  
  // Transmit the payload using RC5 protocol
  for (int i = 0; i < 2; i++) {
    irsend.sendRC5(payload, 16);  // Sending 28 bits with RC5
    delay(40);  // Adjust delay as needed
  }

  delay(5);
    delay(2);
  digitalWrite(Txmitter1, LOW);
  digitalWrite(Txmitter2, LOW);// Ensure 'Txmitter' pin is correctly defined and set up
  digitalWrite(Txmitter3, LOW);
  digitalWrite(Txmitter4, LOW);
  delay(10);

  delay(10);
  return scaledVolts;
}
